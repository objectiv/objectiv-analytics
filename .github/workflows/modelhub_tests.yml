name: "Objectiv Modelhub tests: pytest mypy pycodestyle"

on:
  push:
    paths:
      - 'bach/**'
      - 'modelhub/**'
      # Also run if we update this file, or any other workflow
      - '.github/**'

jobs:
  typecheck-and-run-tests:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        # See https://docs.github.com/en/actions/learn-github-actions/contexts#github-context on why we use endsWith
        isMain:
          - ${{ endsWith(github.ref,'/main') }}
        exclude:
          - isMain: false
            python-version: '3.8'
          - isMain: false
            python-version: '3.9'
          - isMain: false
            python-version: '3.10'
    services:
      # based on https://docs.github.com/en/actions/guides/creating-postgresql-service-containers
      postgres:
        image: postgres
        env:
          POSTGRES_USER: 'objectiv'
          POSTGRES_PASSWORD: 'no_password_set'
          POSTGRES_DB: 'objectiv'
          POSTGRES_HOSTNAME: 'postgres'
          POSTGRES_PORT: 5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      # tell tests to use the above defined postgres service
      OBJ_DB_PG_TEST_URL: 'postgresql://objectiv:no_password_set@localhost:5432/objectiv'
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      # Just the path to a temp file, the actual secret is fully contained in the env var above.
      OBJ_DB_BQ_CREDENTIALS_PATH: './sa.json'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        # Configure cache for the files that pip downloads. At the end of the steps the path gets cached
        # (if the cache keys doesn't exist yet). If the cache key exists it gets restored in this step.
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          key: pip-${{ matrix.python-version }}-${{ hashFiles('modelhub/requirements.txt', 'modelhub/requirements-dev.txt', 'bach/requirements-bigquery.txt') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e bach/
          cd modelhub
          pip install -r requirements-dev.txt -r requirements.txt
      - name: Typecheck with mypy
        run: |
          cd modelhub
          mypy modelhub
      - name: Stylecheck with pycodestyle
        run: |
          cd modelhub
          pycodestyle modelhub
      - name: Unit tests
        run: |
          cd modelhub
          pytest tests_modelhub/unit/
      - name: Functional tests
        run: |
          cd modelhub
          pytest -n 4 --dist loadgroup tests_modelhub/functional/
      - name: Install BQ dependencies
        run: |
          cd modelhub
          # We don't have an equivalent requirement-bigquery.txt in modelhub, as the requirements should be the
          # same as for Bach
          pip install -r ../bach/requirements-bigquery.txt
      - name: Setup GCP Credentials
        run: |
          cd modelhub
          echo $GCP_SERVICE_ACCOUNT > $OBJ_DB_BQ_CREDENTIALS_PATH
      - name: Unit tests ALL
        run: |
          cd modelhub
          pytest --all tests_modelhub/unit/
      - name: Functional tests ALL
        run: |
          cd modelhub
          pytest --all -n 4 --dist loadgroup tests_modelhub/functional/
