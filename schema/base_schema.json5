{
  "name": "base_schema",
  "version": {"base_schema": "0.0.1"},
  "description": "This is the Objectiv base schema",
  "events": {
    "AbstractEvent": {
      "description": "\
        Events must provide a `name` and optionally can, but most likely will, carry a list of Location and Global \n\
        Contexts. Additionally, every event must have an `ApplicationContext` to be able to distinguish from what \n\
        application the event originated.",
      "parents": [],
      "requiresContext": ["ApplicationContext"],
      "properties":{
        "location_stack": {
          "description": "\
            The location stack is an ordered list (stack), that contains a hierarchy of location contexts that \n\
            deterministically describes where an event took place from global to specific. \n\
            The whole stack (list) is needed to exactly pinpoint where in the UI the event originated. \n\
          ",
          "type": "array",
          "items": {
            "type":"AbstractLocationContext"
          }
        },
        "global_contexts": {
          "description": "\
            Global contexts add global / general information about the event. They carry information that is not \n\
            related to where the Event originated (location), such as device, platform or business data.",
          "type": "array",
          "items": {
            "type":"AbstractGlobalContext"
          }
        },
        "_type": {
          "description": "String containing the name of the event type. (eg. ClickEvent)",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for a specific instance of an event. Typically UUID's are a good way of \n\
            implementing this. On the collector side, events should be unique, this means duplicate id's result \n\
            in `not ok` events.",
          "type": "string",
          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$"
        },
        "time": {
          "description": "Timestamp indicating when the event was generated",
          "type": "integer"
        }
      }
    },
    "NonInteractiveEvent": {
      "description": "\
        Non interactive events, are events that are not (directly) triggered by an interaction. For example: \n\
        Consider the following flow of events: \n\
        1. press play in a video player -> ButtonEvent -> interactive \n\
        2. Videoplayer starting playback -> MediaStartEvent -> non-interactive",
      "parents": ["AbstractEvent"],
      "requiresContext": []
    },
    "CompletedEvent": {
      "description": "\
        A non interactive event, that would be emitted when an action completes successfully, e.g. a form that \n\
        is posted. \
      ",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": []
    },
    "AbortedEvent": {
      "description": "\
        A non interactive event, that would be emitted when an action fails or is aborted, e.g. a form that \n\
        is posted, but not successfully. \
      ",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["ErrorContext"]
    },
    "DocumentLoadedEvent": {
      "description": "\
        A non interactive event that is emitted after a document finishes loading. It should provide a \n\
        `WebDocumentContext` which should describe the state (eg. URL) of the event. \n\
        \n\
        NOTE: with SPA's this probably only happens once, as page (re)loads don't happen after the initial page load",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["WebDocumentContext"]
    },
    "URLChangeEvent": {
      "description": "\
        non interactive event that is emitted when the URL of a page has changed. Also contains a `WebDocumentContext` \n\
        that details the change.",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["WebDocumentContext"]
    },
    "ApplicationLoadedEvent": {
      "description": "\
        non interactive event that is emitted after an application (eg. SPA) has finished loading. \n\
        Contains a `SectionContext`",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["SectionContext"]
    },
    "SectionVisibleEvent": {
      "description": "Non interactive event, emitted after a section (`SectionContext`) has become visible.",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["SectionContext"]
    },
    "SectionHiddenEvent": {
      "description": "\
        Non interactive event, emitted after a section (`SectionContext`) has become invisible.",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["SectionContext"]
    },
    "VideoEvent": {
      "description": "Family of non interactive events triggered by a video player",
      "parents": ["NonInteractiveEvent"],
      "requiresContext": ["MediaPlayerContext"]
    },
    "VideoLoadEvent": {
      "description": "Event emitted after a video completes loading.",
      "parents": ["VideoEvent"],
      "requiresContext": []
    },
    "VideoStartEvent": {
      "description": "Event emitted after a video starts playback.",
      "parents": ["VideoEvent"],
      "requiresContext": []
    },
    "VideoStopEvent": {
      "description": "Event emitted after a video stops playback.",
      "parents": ["VideoEvent"],
      "requiresContext": []
    },
    "VideoPauseEvent": {
      "description": "Event emitted after a video pauses playback (toggle).",
      "parents": ["VideoEvent"],
      "requiresContext": []
    },
    "InteractiveEvent": {
      "description": "Events that are the direct result of a user interaction. Eg. a Button Click",
      "parents": ["AbstractEvent"],
      "requiresContext": ["SectionContext"]
    },
    "ClickEvent": {
      "description": "Event triggered by a user clicking on an element",
      "parents": ["InteractiveEvent"],
      "requiresContext": []
    },
    "InputChangeEvent": {
      "description": "Event triggered when user input is modified.",
      "parents": ["InteractiveEvent"],
      "requiresContext": ["InputContext"]
    }
  },
  "contexts": {
    "AbstractContext": {
       "description": "\
          Abstract Contexts define either properties required by Collectors or internal ones for hierarchical \n\
          discrimination purposes. \n\
          \n\
          All Contexts inherit from AbstractContext. It defines the bare minimum properties every Context must implement. \n\
          \n\
          For example we never want to mix Location Contexts with Global Contexts and Events may requires specific Contexts \n\
          to be present in their Location Stack. Eg. a NavigationContext instead of a generic SectionContext. \n\
          \n\
          This ensures that Events are carrying the Contexts they require, making them meaningful and identifiable. \n\
          \n\
          All Contexts inherit from AbstractContext. It defines the bare minimum properties every Context must implement. \
       ",
      "properties": {
        "id": {
          "description":"A unique string identifier to be combined with the Context Type (`_type`) \n\
           for Context instance uniqueness.",
          "type": "string"
        },
        "_type": {
          "description": "A string literal used during serialization. Should always match the Context interface name.",
          "type": "string"
        }
      }
    },
    "AbstractLocationContext": {
      "description": "\
        This is the abstract parent of all location contexts. LocationContexts are used to populate Trackers or Events \n\
        `location_stack` properties. A Location Stack is meant to describe accurately where an Event originated in the \n\
        UI Eg. Sections, Menus, etc.",
      "parents": [
        "AbstractContext"
      ]
    },
    "AbstractGlobalContext": {
      "description": "\
        Global_contexts are used to populate Trackers or Events `global_contexts` properties. They carry information \n\
        that is not related to where the Event originated, such as device, platform or business data.",
      "parents": [
        "AbstractContext"
      ]
    },
    "ApplicationContext": {
      "description": "Global context containing the origin (application id) of the event",
      "parents": [
        "AbstractGlobalContext"
      ]
    },
    "SectionContext": {
      "description": "\
        SectionContexts are special LocationContexts representing a logical area of the UI or the system. \n\
        They can be often reasoned about as being containers of other LocationContexts but not the direct targets of \n\
        Events.",
      "parents": [
        "AbstractLocationContext"
      ]
    },
    "WebDocumentContext": {
      "description": "global context about a web document. Should at least contain the current URL.",
      "parents": [
        "SectionContext"
      ],
      "properties": {
        "url": {
          "description": "Property containing a (valid) URL",
          "type": "string"
        }
      }
    },
    "ScreenContext": {
      "description": "SectionContext for a screen",
      "parents": [
        "SectionContext"
      ],
      "properties": {
        "screen": {
          "description": "name of the screen",
          "type": "string"
        }
      }
    },
    "ExpandableSectionContext": {
      "description": "A `SectionContext` that is expandable.",
      "parents": [
        "SectionContext"
      ]
    },
    "MediaPlayerContext": {
      "description": "A `SectionContext` containing a media player.",
      "parents": [
        "SectionContext"
      ]
    },
    "NavigationContext": {
      "description": "A `SectionContext` containing navigational elements, for example a menu.",
      "parents": [
        "SectionContext"
      ]
    },
    "OverlayContext": {
      "description": "A `SectionContext` that is an overlay",
      "parents": [
        "SectionContext"
      ]
    },
    "ItemContext": {
      "description": "\
        ItemContexts are special LocationContexts representing interactive elements of the UI or targets in a system. \n\
        These elements may trigger both Interactive and Non-Interactive Events. Eg. an Input field or a Button.",
      "parents": [
        "AbstractLocationContext"
      ]
    },
    "InputContext": {
      "description": "A location context, representing user input. For example, a form field, like input.",
      "parents": [
        "ItemContext"
      ]
    },
    "ActionContext": {
      "description": "\
        ActionContexts are a more specific version of ItemContext specifically meant to describe actionable Items. \n\
        These represent interactive elements that will trigger an Interactive Event. Eg. A Button or Link.",
      "parents": [
        "ItemContext"
      ],
      "properties": {
        "text": {
          "description": "The text of the interactive element or, for visuals, a string describing it",
          "type": "string"
        },
      }
    },
    "ButtonContext": {
      "description": "interactive element, representing a button.",
      "parents": [
        "ActionContext"
      ]
    },
    "LinkContext": {
      "description": "interactive element, representing a (hyper) link.",
      "parents": [
        "ActionContext"
      ],
      "properties": {
        "href": {
          "description": "URL (href) the link points to",
          "type": "string"
        }
      }
    },
    "DeviceContext": {
      "description": "Global context containing meta info about the device that emitted the event.",
      "parents": [
        "AbstractGlobalContext"
      ],
      "properties": {
        "user_agent": {
          "description": "String describing the user-agent that emitted the event",
          "type": "string"
        }
      }
    },
    "ErrorContext": {
      "description": "Generic global context to encapsulate any errors",
      "parents": [
        "AbstractGlobalContext"
      ],
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string"
        }
      }
    },
    "CookieIdContext": {
      "description": "Global context with information needed to reconstruct a user session.",
      "parents": [
        "AbstractGlobalContext"
      ],
      "properties": {
        "cookie_id": {
          "description": "Unique identifier from the session cookie",
          "type": "string"
        }
      }
    },
    "SessionContext": {
      "description": "Context with meta info pertaining to the current session.",
      "parents": [
        "AbstractGlobalContext"
      ],
      "properties": {
        "hit_number": {
          "description": "Hit counter relative to the current session, this event originated in.",
          "type": "integer"
        }
      }
    },
    "HttpContext": {
      "description": "Global context with meta information about the agent that sent the event.",
      "parents": [
        "AbstractGlobalContext"
      ],
      "properties": {
        "referer": {
          "description": "Full URL to HTTP referrer of the current page.",
          "type": "string"
        },
        "user_agent": {
          "description": "User-agent of the agent that sent the event.",
          "type": "string"
        },
        "remote_address": {
          "description": "(public) IP address of the agent that sent the event.",
          "type": "string"
        }
      }
    }
  }
}
