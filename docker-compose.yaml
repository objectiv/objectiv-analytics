# Start the Objectiv Pipeline.
#
# By default uses images from eu.gcr.io/objectiv-production
# To use locally built images set the OBJECTIV_CONTAINER_URL variable to just "objectiv"
# To use a specific image version instead of latest set OBJECTIV_CONTAINER_TAG


x-db_env_variables: &db_env_variables
  # warning: never put production credentials in here!
  POSTGRES_USER: 'objectiv'
  POSTGRES_PASSWORD: '0bj3ctiv'
  POSTGRES_DB: 'objectiv'
  POSTGRES_HOSTNAME: 'objectiv_postgres'
  POSTGRES_PORT: 5432

version: "3.4"
services:
  objectiv_collector:
    container_name: objectiv_collector
    depends_on:
      - objectiv_postgres
    # default image: eu.gcr.io/objectiv-production/backend:latest
    image: ${OBJECTIV_CONTAINER_URL-eu.gcr.io/objectiv-production}/backend:${OBJECTIV_CONTAINER_TAG-latest}
    working_dir: /services
    entrypoint: bash -c "objectiv-db-init; ./entry_point.sh"
    ports:
      - 5000:5000
    networks:
      - obj
    environment:
      <<: *db_env_variables
    healthcheck:
      test: ["CMD", "printf",  "\"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/5000"]
      interval: 30s
      timeout: 2s
      retries: 3

  objectiv_postgres:
    container_name: objectiv_postgres
    image: postgres:latest
    ports:
      - 5432:5432
    networks:
      - obj
    volumes:
      - pgdata:/var/lib/postgresql/data/
    environment:
      <<: *db_env_variables
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U objectiv" ]
      interval: 10s
      timeout: 2s
      retries: 5

  objectiv_notebook:
    container_name: objectiv_notebook
    # default image: eu.gcr.io/objectiv-production/notebook:latest
    image: ${OBJECTIV_CONTAINER_URL-eu.gcr.io/objectiv-production}/notebook:${OBJECTIV_CONTAINER_TAG-latest}
    ports:
      - 8888:8888
    networks:
      - obj
    volumes:
      - ./ds/notebooks_volume:/home/jovyan/notebooks_volume
    environment:
      <<: *db_env_variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888" ]
      interval: 30s
      timeout: 2s
      retries: 3


# persist PG data in a docker volume
volumes:
  pgdata:

# use bridged networking, so we can access services provided from the host
networks:
  obj:
    driver: bridge

